import argparse
import time
from enum import Enum

import numpy as np

from udacidrone import Drone
from udacidrone.connection import MavlinkConnection, WebSocketConnection  # noqa: F401
from udacidrone.messaging import MsgID


class States(Enum):
    MANUAL = 0
    ARMING = 1
    TAKEOFF = 2
    WAYPOINT = 3
    LANDING = 4
    DISARMING = 5

def enum(*args):
    enums = dict(zip(args, range(len(args))))
    return type('Enum', (), enums)

Locations = enum('LATITUDE','LONGITUDE','ALTITUDE')

class BackyardFlyer(Drone):

    def __init__(self, connection):
        super().__init__(connection)
        self.target_position = np.array([0.0, 0.0, 0.0])
        self.all_waypoints = []
        # Not using multi thred
        # self.in_mission = True
        self.check_state = {}

        # initial state
        self.flight_state = States.MANUAL

        # TODO: Register all your callbacks here
        self.register_callback(MsgID.LOCAL_POSITION, self.local_position_callback)
        self.register_callback(MsgID.LOCAL_VELOCITY, self.velocity_callback)
        self.register_callback(MsgID.STATE, self.state_callback)

    def local_position_callback(self):
        """
        TODO: Implement this method

        This triggers when `MsgID.LOCAL_POSITION` is received and self.local_position contains new data
        """
        #print(self.local_position[Locations.LATITUDE],self.local_position[Locations.LONGITUDE],self.local_position[Locations.ALTITUDE])
        if self.flight_state == States.TAKEOFF:
            if self.local_position[Locations.ALTITUDE] > -0.95* self.target_position[Locations.ALTITUDE]:
                self.waypoint_transition()
        elif self.flight_state == States.WAYPOINT:
            #print("DIFF: ",np.linalg.norm(self.target_position[0:2] - self.local_position[0:2]),"TAR: ",self.target_position, "LOC: ",self.local_position)
            #print("ALT: ",abs(self.target_position[Locations.ALTITUDE] + self.local_position[Locations.ALTITUDE]),self.target_position[Locations.ALTITUDE],self.local_position[Locations.ALTITUDE])
            #if abs(self.target_position[Locations.ALTITUDE] + self.local_position[Locations.ALTITUDE]) < 0.1:
            #    print("LON: ",abs(self.target_position[Locations.LONGITUDE] - self.local_position[Locations.LONGITUDE]),self.target_position[Locations.LONGITUDE],self.local_position[Locations.LONGITUDE])
            #    if abs(self.target_position[Locations.LONGITUDE] - self.local_position[Locations.LONGITUDE]) < 0.1:
            #        print("LAT: ",abs(self.target_position[Locations.LATITUDE] - self.local_position[Locations.LATITUDE]),self.target_position[Locations.LATITUDE],self.local_position[Locations.LATITUDE])
            #        if abs(self.target_position[Locations.LATITUDE] -  self.local_position[Locations.LATITUDE]) < 0.05:
            print("GH:",self.global_home)
            print("TP:",self.target_position)
            print("GH+TP:",self.global_home+self.target_position,np.linalg.norm(self.global_home+self.target_position))
            transit = self.global_home+self.target_position
            print("TR:",transit,transit[Locations.ALTITUDE],transit[Locations.LONGITUDE])
            print("LP:",self.local_position)
            print("GP:",self.global_position)
            print("DF:",abs(transit[Locations.ALTITUDE] + self.local_position[Locations.ALTITUDE]))
            print("DF1:",abs(transit[Locations.LONGITUDE] - self.local_position[Locations.LONGITUDE]))
            #if np.linalg.norm(self.global_position[0:2] - self.global_home[0:2] + self.target_position[0:2] ) < 1.0:
            if abs(transit[Locations.ALTITUDE] + self.local_position[Locations.ALTITUDE]) < 0.1:
                print("LON: ",abs(transit[Locations.LONGITUDE] - self.local_position[Locations.LONGITUDE]))
                if abs(transit[Locations.LONGITUDE] - self.global_position[Locations.LONGITUDE]) < 0.1:
            #        print("LAT: ",abs(self.target_position[Locations.LATITUDE] - self.local_position[Locations.LATITUDE]),self.target_position[Locations.LATITUDE],self.local_position[Locations.LATITUDE])
                    if abs(transit[Locations.LATITUDE]-self.global_position[Locations.LATITUDE]) < 0.05:
            #if np.linalg.norm(self.target_position[0:2] - self.local_position[0:2]) < 0.05:
                        if len(self.all_waypoints) > 0:
                            self.waypoint_transition()
                        else:
                            self.landing_transition()

    def velocity_callback(self):
        """
        TODO: Implement this method

        This triggers when `MsgID.LOCAL_VELOCITY` is received and self.local_velocity contains new data
        """
        #print("VEL: ",self.local_velocity)
        if self.flight_state == States.LANDING:
            #print("VEL: ",self.local_position[Locations.ALTITUDE],self.global_position[Locations.ALTITUDE])
            if self.global_position[Locations.ALTITUDE] < 0.1:
                self.disarming_transition()

    def state_callback(self):
        """
        TODO: Implement this method

        This triggers when `MsgID.STATE` is received and self.armed and self.guided contain new data
        """
        #print("Flight State:", self.flight_state," Armed:",self.armed," GUIDED:",self.guided," IN MISSION:",self.in_mission)
        if self.flight_state == States.MANUAL:
            self.arming_transition()
        elif self.flight_state == States.ARMING:
            if self.armed:
                self.takeoff_transition()
        elif self.flight_state == States.DISARMING:
            if ~self.armed:
                 self.manual_transition()

    def calculate_box(self):
        """TODO: Fill out this method
        
        1. Return waypoints to fly a box
        """
        print("calculate box")
        waypoints = [[10.0, 0.0, 3.0], [10.0, 10.0, 3.0], [0.0, 10.0, 3.0], [0.0, 0.0, 3.0]]
        return waypoints

    def arming_transition(self):
        """TODO: Fill out this method
        
        1. Take control of the drone
        2. Pass an arming command
        3. Set the home location to current position
        4. Transition to the ARMING state
        """
        print("arming transition")
        print(self.global_position[Locations.LATITUDE],self.global_position[Locations.LONGITUDE],self.global_position[Locations.ALTITUDE])
        # Take control of the drone
        self.take_control()
        # Arm the drone
        self.arm()
        # set home position
        self.set_home_position(self.global_position[Locations.LATITUDE],self.global_position[Locations.LONGITUDE],self.global_position[Locations.ALTITUDE])
        
        # self.in_mission = False
        # Transition to arming state
        self.flight_state = States.ARMING


    def takeoff_transition(self):
        """TODO: Fill out this method
        
        1. Set target_position altitude to 3.0m
        2. Command a takeoff to 3.0m
        3. Transition to the TAKEOFF state
        """
        print("takeoff transition")
        # Set target_position altitude to 3.0m
        target_altitude = 3.0
        self.target_position[Locations.ALTITUDE] = target_altitude
        # Take off command
        self.takeoff(target_altitude)
        # Transition to Take off state
        self.flight_state = States.TAKEOFF

    def waypoint_transition(self):
        """TODO: Fill out this method
    
        1. Command the next waypoint position
        2. Transition to WAYPOINT state
        """
        print("waypoint transition")
        if len(self.all_waypoints) == 0:
            self.all_waypoints = self.calculate_box()
        else:
            print("LOC: ",self.global_position[Locations.LATITUDE],self.global_position[Locations.LONGITUDE],self.global_position[Locations.ALTITUDE])
            self.target_position = self.all_waypoints.pop(0)
            print('target position', self.target_position)
            self.cmd_position(self.target_position[Locations.LATITUDE], self.target_position[Locations.LONGITUDE], self.target_position[Locations.ALTITUDE], 0.0)
        self.flight_state = States.WAYPOINT

    def landing_transition(self):
        """TODO: Fill out this method
        
        1. Command the drone to land
        2. Transition to the LANDING state
        """
        print("landing transition")
        self.land()
        self.flight_state = States.LANDING

    def disarming_transition(self):
        """TODO: Fill out this method
        
        1. Command the drone to disarm
        2. Transition to the DISARMING state
        """
        print("disarm transition")
        self.disarm()
        self.release_control()
        self.flight_state = States.DISARMING

    def manual_transition(self):
        """This method is provided
        
        1. Release control of the drone
        2. Stop the connection (and telemetry log)
        3. End the mission
        4. Transition to the MANUAL state
        """
        print("manual transition")

        self.release_control()
        self.stop()
        # not using multi thread
        #self.in_mission = False
        self.flight_state = States.MANUAL
        print(self.global_position[Locations.LATITUDE],self.global_position[Locations.LONGITUDE],self.global_position[Locations.ALTITUDE])


    def start(self):
        """This method is provided
        
        1. Open a log file
        2. Start the drone connection
        3. Close the log file
        """
        print("Creating log file")
        self.start_log("Logs", "NavLog.txt")
        print("starting connection")
        self.connection.start()
        print("Closing log file")
        self.stop_log()


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--port', type=int, default=5760, help='Port number')
    parser.add_argument('--host', type=str, default='127.0.0.1', help="host address, i.e. '127.0.0.1'")
    args = parser.parse_args()

    conn = MavlinkConnection('tcp:{0}:{1}'.format(args.host, args.port), threaded=False, PX4=False)
    #conn = WebSocketConnection('ws://{0}:{1}'.format(args.host, args.port))
    drone = BackyardFlyer(conn)
    time.sleep(2)
    drone.start()
