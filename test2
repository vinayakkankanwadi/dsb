import argparse
import time
from enum import Enum

import numpy as np

from udacidrone import Drone
from udacidrone.connection import MavlinkConnection, WebSocketConnection  # noqa: F401
from udacidrone.messaging import MsgID


class States(Enum):
    MANUAL = 0
    ARMING = 1
    TAKEOFF = 2
    WAYPOINT = 3
    LANDING = 4
    DISARMING = 5

def enum(*args):
    enums = dict(zip(args, range(len(args))))
    return type('Enum', (), enums)

Locations = enum('LATITUDE','LONGITUDE','ALTITUDE')

TARGET_LATITUDE  = 10.0
TARGET_LONGITUDE = 10.0
TARGET_ALTITUDE  = 3.0

class BackyardFlyer(Drone):

    def __init__(self, connection):
        super().__init__(connection)
        self.target_position = np.array([0.0, 0.0, 0.0])
        self.all_waypoints = []
        # Not using Multi thread yet        
        #self.in_mission = True
        self.check_state = {}

        # initial state
        self.flight_state = States.MANUAL

        # TODO: Register all your callbacks here
        self.register_callback(MsgID.LOCAL_POSITION, self.local_position_callback)
        self.register_callback(MsgID.LOCAL_VELOCITY, self.velocity_callback)
        self.register_callback(MsgID.STATE, self.state_callback)

    def check_position(self):
        ret = False
        # Check TARGET_ALTITUDE, TARGET_LATITUDE, TARGET_LONGITUDE
        latitude_difference = abs(self.target_position[Locations.LATITUDE]) - abs(self.local_position[Locations.LATITUDE])
        longitude_difference = abs(self.target_position[Locations.LONGITUDE]) - abs(self.local_position[Locations.LONGITUDE])
        altitude_difference = abs(self.target_position[Locations.ALTITUDE]) - abs(self.local_position[Locations.ALTITUDE])
        print("LA: [%2.2f]/[%2.2f]=[%2.2f]  LO: [%2.2f]/[%2.2f]=[%2.2f] AL: [%2.2f]/[%2.2f]=[%2.2f]" % (abs(self.local_position[Locations.LATITUDE]),self.target_position[Locations.LATITUDE],abs(latitude_difference),abs(self.local_position[Locations.LONGITUDE]),self.target_position[Locations.LONGITUDE],abs(longitude_difference),abs(self.local_position[Locations.ALTITUDE]),self.target_position[Locations.ALTITUDE],abs(altitude_difference)))
        
        if abs(altitude_difference) < 0.05 and self.flight_state == States.TAKEOFF:
            ret = True
        elif abs(altitude_difference) < 0.05 and self.flight_state == States.LANDING:
            ret = True
        elif abs(altitude_difference) < 0.05 and self.flight_state == States.WAYPOINT:
            if abs(latitude_difference) < 0.2 and abs(longitude_difference) < 0.2:
                ret = True
        return ret

    def local_position_callback(self):
        """
        This triggers when `MsgID.LOCAL_POSITION` is received and self.local_position contains new data
        """
        if self.flight_state == States.TAKEOFF:
            if self.check_position():
                self.all_waypoints = self.calculate_box()
                self.waypoint_transition()
        elif self.flight_state == States.WAYPOINT:
            if self.check_position():
                if len(self.all_waypoints) > 0:
                     self.waypoint_transition()
                else:
                    self.target_position[Locations.ALTITUDE] = 0
                    self.landing_transition()
        elif self.flight_state == States.LANDING:
            if self.check_position():
                self.disarming_transition()

    def velocity_callback(self):
        """
        TODO: Implement this method

        This triggers when `MsgID.LOCAL_VELOCITY` is received and self.local_velocity contains new data
        """
        # It would be nice if we could regulate the speed so to have smooth transition and accuracy
        #self.cmd_velocity(-x,-y,-z,0.0)
        pass

    def state_callback(self):
        """
        This triggers when `MsgID.STATE` is received and self.armed and self.guided contain new data
        """
        # Respective transition should end in Respective State
        # #####################################################        
        # MANUAL    -> arming_transition    -> ARMING
        # ARMING    -> takeoff_transition   -> TAKEOFF
        # TAKEOFF   -> waypoint_transition  -> WAYPOINT
        # WAYPOINT  -> landing_transition   -> LANDING
        # LANDING   -> disarming_transition -> DISARMING
        # DISARMING -> manual_transition    -> MANUAL
        # #####################################################        

        if self.flight_state == States.MANUAL:
            self.arming_transition()
        elif self.flight_state == States.ARMING:
            if self.armed:
                self.takeoff_transition()
        elif self.flight_state == States.DISARMING:
            if ~self.armed:
                 self.manual_transition()

    def calculate_box(self):
        """
        1. Return waypoints to fly a box
        """
        waypoints = [[TARGET_LATITUDE, 0.0, TARGET_ALTITUDE], [TARGET_LATITUDE, TARGET_LONGITUDE, TARGET_ALTITUDE], [0.0, TARGET_LONGITUDE, TARGET_ALTITUDE], [0.0, 0.0, TARGET_ALTITUDE]]
        return waypoints

    def arming_transition(self):
        """
        1. Take control of the drone
        2. Pass an arming command
        3. Set the home location to current position
        4. Transition to the ARMING state
        """
        print("arming transition")
        self.take_control()
        self.arm()
        self.set_home_position(self.global_position[Locations.LATITUDE],self.global_position[Locations.LONGITUDE],self.global_position[Locations.ALTITUDE])
        self.flight_state = States.ARMING        
        print("START ",self.global_position[Locations.LATITUDE],self.global_position[Locations.LONGITUDE],self.global_position[Locations.ALTITUDE])        

    def takeoff_transition(self):
        """
        1. Set target_position altitude to 3.0m
        2. Command a takeoff to 3.0m
        3. Transition to the TAKEOFF state
        """
        print("takeoff transition")
        self.target_position[Locations.ALTITUDE] = TARGET_ALTITUDE
        self.takeoff(self.target_position[Locations.ALTITUDE])
        self.flight_state = States.TAKEOFF        

    def waypoint_transition(self):
        """
        1. Command the next waypoint position
        2. Transition to WAYPOINT state
        """
        print("waypoint transition")
        self.target_position = self.all_waypoints.pop(0)
        print('target position', self.target_position)
        self.cmd_position(self.target_position[Locations.LATITUDE], self.target_position[Locations.LONGITUDE], self.target_position[Locations.ALTITUDE], 0.0)
        self.flight_state = States.WAYPOINT

    def landing_transition(self):
        """
        1. Command the drone to land
        2. Transition to the LANDING state
        """
        print("landing transition")
        self.land()
        self.flight_state = States.LANDING

    def disarming_transition(self):
        """
        1. Command the drone to disarm
        2. Transition to the DISARMING state
        """
        print("disarm transition")
        self.disarm()
        self.flight_state = States.DISARMING        

    def manual_transition(self):
        """This method is provided
        1. Release control of the drone
        2. Stop the connection (and telemetry log)
        3. End the mission
        4. Transition to the MANUAL state
        """
        print("manual transition")
        self.release_control()
        self.stop()
        # Not using Multi thread yet
        # self.in_mission = False
        self.flight_state = States.MANUAL
        print("END ",self.global_position[Locations.LATITUDE],self.global_position[Locations.LONGITUDE],self.global_position[Locations.ALTITUDE])                

    def start(self):
        """This method is provided
        1. Open a log file
        2. Start the drone connection
        3. Close the log file
        """
        print("Creating log file")
        self.start_log("Logs", "NavLog.txt")
        print("starting connection")
        self.connection.start()
        print("Closing log file")
        self.stop_log()


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--port', type=int, default=5760, help='Port number')
    parser.add_argument('--host', type=str, default='127.0.0.1', help="host address, i.e. '127.0.0.1'")
    args = parser.parse_args()

    conn = MavlinkConnection('tcp:{0}:{1}'.format(args.host, args.port), threaded=False, PX4=False)
    #conn = WebSocketConnection('ws://{0}:{1}'.format(args.host, args.port))
    drone = BackyardFlyer(conn)
    time.sleep(2)
    drone.start()
